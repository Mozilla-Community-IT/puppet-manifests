# Puppet Configured. Do not change this file manually
[main]
server=csa-puppet1
modulepath=/etc/puppet/puppet-manifests/modules/ 

[master]

    # The default value is '$ssldir/public_keys'.
    publickeydir = /etc/puppet/ssl/public_keys

    # Configuration Directory
    confdir = /etc/puppet

    # Which type of queue to use for asynchronous processing.  If your stomp server requires
    # authentication, you can include it in the URI as long as your stomp client library is at least 1.1.1
    # The default value is 'stomp://localhost:61613/'.
    # queue_source = stomp://localhost:61613/

    # Where each client stores the CA certificate.
    # The default value is '$certdir/ca.pem'.
    localcacert = /etc/puppet/ssl/certs/ca.pem


    # The private key directory.
    privatekeydir = /etc/puppet/ssl/private_keys

    # Where Puppet should store plugins that it pulls down from the central
    # server.
    # The default value is '$libdir'.
    plugindest = /var/lib/puppet/lib

    # Where puppet agent stores the password for its private key.
    # Generally unused.
    # The default value is '$privatedir/password'.
    passfile = /etc/puppet/ssl/private/password

    # Whether to log and report a contextual diff when files are being replaced.
    # This causes partial file contents to pass through Puppet's normal
    # logging and reporting system, so this setting should be used with
    # caution if you are sending Puppet's reports to an insecure
    # destination. This feature currently requires the `diff/lcs` Ruby
    # library.
    # show_diff = false

    # Whether to send the process into the background.  This defaults
    # to true on POSIX systems, and to false on Windows (where Puppet
    # currently cannot daemonize).
    # The default value is 'true'.
    # daemonize = true

    # An extra search path for Puppet.  This is only useful
    # for those files that Puppet will load on demand, and is only
    # guaranteed to work for those cases.  In fact, the autoload
    # mechanism is responsible for making sure this directory
    # is in Ruby's search path
    # The default value is '$vardir/lib'.
    libdir = /var/lib/puppet/lib

    # Boolean; whether Puppet should store only facts and exported resources in the storeconfigs
    # database. This will improve the performance of exported resources with the older
    # `active_record` backend, but will disable external tools that search the storeconfigs database.
    # Thinning catalogs is generally unnecessary when using PuppetDB to store catalogs.
    # thin_storeconfigs = false

    # Where Puppet PID files are kept.
    # The default value is '$vardir/run'.
    rundir = /var/lib/puppet/run

    # Whether certificate revocation should be supported by downloading a
    # Certificate Revocation List (CRL)
    # to all clients.  If enabled, CA chaining will almost definitely not work.
    # The default value is 'true'.
    # certificate_revocation = true

    # The minimum time to wait between checking for updates in
    # configuration files.  This timeout determines how quickly Puppet checks whether
    # a file (such as manifests or templates) has changed on disk. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '15s'.
    filetimeout = 15

    # The HTTP proxy host to use for outgoing connections.  Note: You
    # may need to use a FQDN for the server hostname when using a proxy.
    # The default value is 'none'.
    # http_proxy_host = none

    # Where individual hosts store and look for their certificates.
    # The default value is '$certdir/$certname.pem'.
    hostcert = /etc/puppet/ssl/certs/csa-puppet1.openstacklocal.pem

    # Whether log files should always flush to disk.
    # The default value is 'true'.
    # autoflush = true

    # The environment Puppet is running in.  For clients
    # (e.g., `puppet agent`) this determines the environment itself, which
    # is used to find modules and much more.  For servers (i.e., `puppet master`)
    # this provides the default environment for nodes we know nothing about.
    # The default value is 'production'.
    # environment = production

    # Whether plugins should be synced with the central server.
    # The default value is 'true'.
    # pluginsync = true

    # How to store cached catalogs. Valid values are 'json' and 'yaml'. The agent application defaults to 'json'.
    # catalog_cache_terminus = 

    # Where SSL certificates are kept.
    # The default value is '$confdir/ssl'.
    ssldir = /etc/puppet/ssl

    # Where to find information about nodes.
    # The default value is 'plain'.
    node_terminus = plain

    # Whether to just print a manifest to stdout and exit.  Only makes
    # sense when specified on the command line as `--genmanifest`.  Takes into account arguments specified
    # on the CLI.
    # genmanifest = false

    # The directory where Puppet state is stored.  Generally,
    # this directory can be removed without causing harm (although it
    # might result in spurious service restarts).
    # The default value is '$vardir/state'.
    statedir = /var/lib/puppet/state

    # Whether Puppet should manage the owner, group, and mode of files it uses internally
    # The default value is 'true'.
    # manage_internal_file_permissions = true

    # A command to run before every agent run.  If this command returns a non-zero
    # return code, the entire Puppet run will fail.
    # The default value is ''.
    # prerun_command = 

    # Which type of queue to use for asynchronous processing.
    # The default value is 'stomp'.
    # queue_type = stomp

    # The directory in which to store log files
    # The default value is '$vardir/log'.
    logdir = /var/lib/puppet/log

    # Where individual hosts store and look for their public key.
    # The default value is '$publickeydir/$certname.pem'.
    hostpubkey = /etc/puppet/ssl/public_keys/csa-puppet1.openstacklocal.pem

    # Where Puppet should look for facts.  Multiple directories should
    # be separated by the system path separator character. (The POSIX path
    # separator is ':', and the Windows path separator is ';'.)
    # The default value is '$vardir/lib/facter:$vardir/facts'.
    factpath = /var/lib/puppet/lib/facter:/var/lib/puppet/facts

    # Where host certificate requests are stored.
    # The default value is '$ssldir/certificate_requests'.
    requestdir = /etc/puppet/ssl/certificate_requests

    # Where to retrive information about data.
    # The default value is 'hiera'.
    data_binding_terminus = hiera

    # An external command that can produce node information.  The command's output
    # must be a YAML dump of a hash, and that hash must have a `classes` key and/or
    # a `parameters` key, where `classes` is an array or hash and
    # `parameters` is a hash.  For unknown nodes, the command should
    # exit with a non-zero exit code.
    # 
    # This command makes it straightforward to store your node mapping
    # information in other data sources like databases.
    # The default value is 'none'.
    # external_nodes = none

    # The name to use when handling certificates.  Defaults
    # to the fully qualified domain name.
    # The default value is 'csa-puppet1.openstacklocal'.
    certname = csa-puppet1

    # Which diff command to use when printing differences between files. This setting
    # has no default value on Windows, as standard `diff` is not available, but Puppet can use many
    # third-party diff tools.
    # The default value is 'diff'.
    # diff = diff

    # Freezes the 'main' class, disallowing any code to be added to it.  This
    # essentially means that you can't have any code outside of a node,
    # class, or definition other than in the site manifest.
    # freeze_main = false

    # Whether to use a queueing system to provide asynchronous database integration.
    # Requires that `puppet queue` be running.
    # async_storeconfigs = false

    # Where Puppet stores dynamic and growing data.  The default for this
    # setting is calculated specially, like `confdir`_.
    # The default value is '/var/lib/puppet'.
    vardir = /var/lib/puppet

    # Certificate authorities who issue server certificates.  SSL servers will not be
    # considered authentic unless they posses a certificate issued by an authority
    # listed in this file.  If this setting has no value then the Puppet master's CA
    # certificate (localcacert) will be used.
    # ssl_client_ca_auth = 

    # Should usually be the same as the facts terminus
    # The default value is '$facts_terminus'.
    inventory_terminus = yaml

    # Where the client stores private certificate information.
    # The default value is '$ssldir/private'.
    privatedir = /etc/puppet/ssl/private

    # From where to retrieve plugins.  The standard Puppet `file` type
    # is used for retrieval, so anything that is a valid file source can
    # be used here.
    # The default value is 'puppet://$server/plugins'.
    pluginsource = puppet://puppet/plugins

    # Turns the binding system on or off. This includes hiera-2 and data in modules.  The binding system aggregates data from
    # modules and other locations and makes them available for lookup.  The binding system is experimental and any or all of it may change.
    # binder = false

    # What syslog facility to use when logging to syslog.
    # Syslog has a fixed list of valid facilities, and you must
    # choose one of those; you cannot just make one up.
    # The default value is 'daemon'.
    # syslogfacility = daemon

    # The comma-separated list of alternative DNS names to use for the local host.
    # 
    # When the node generates a CSR for itself, these are added to the request
    # as the desired `subjectAltName` in the certificate: additional DNS labels
    # that the certificate is also valid answering as.
    # 
    # This is generally required if you use a non-hostname `certname`, or if you
    # want to use `puppet kick` or `puppet resource -H` and the primary certname
    # does not match the DNS name you use to communicate with the host.
    # 
    # This is unnecessary for agents, unless you intend to use them as a server for
    # `puppet kick` or remote `puppet resource` management.
    # 
    # It is rarely necessary for servers; it is usually helpful only if you need to
    # have a pool of multiple load balanced masters, or for the same master to
    # respond on two physically separate networks under different names.
    # The default value is ''.
    # dns_alt_names = 

    # Which arguments to pass to the diff command when printing differences between
    # files. The command to use can be chosen with the `diff` setting.
    # The default value is '-u'.
    # diff_args = -u

    # Stores trusted node data in a hash called $trusted.
    # When true also prevents $trusted from being overridden in any scope.
    # trusted_node_data = false

    # Where the host's certificate revocation list can be found.
    # This is distinct from the certificate authority's CRL.
    # The default value is '$ssldir/crl.pem'.
    hostcrl = /etc/puppet/ssl/crl.pem

    # Where the puppet agent web server logs.
    # The default value is '$logdir/http.log'.
    httplog = /var/lib/puppet/log/http.log

    # Boolean; whether to use the zlib library
    # The default value is 'true'.
    # zlib = true

    # Where individual hosts store and look for their certificate requests.
    # The default value is '$ssldir/csr_$certname.pem'.
    hostcsr = /etc/puppet/ssl/csr_csa-puppet1.openstacklocal.pem

    # Whether to print stack traces on some errors
    # trace = false

    # Where to retrieve external facts for pluginsync
    # The default value is 'puppet://$server/pluginfacts'.
    pluginfactsource = puppet://puppet/pluginfacts

    # Where to get node catalogs.  This is useful to change if, for instance,
    # you'd like to pre-compile catalogs and store them in memcached or some other easily-accessed store.
    # The default value is 'compiler'.
    catalog_terminus = compiler

    # The certificate directory.
    # The default value is '$ssldir/certs'.
    certdir = /etc/puppet/ssl/certs

    # The YAML file containing indirector route configuration.
    # The default value is '$confdir/routes.yaml'.
    route_file = /etc/puppet/routes.yaml

    # The name of the application, if we are running as one.  The
    # default is essentially $0 without the path or `.rb`.
    # The default value is 'master'.
    name = master

    # Whether to enable experimental performance profiling
    # profile = false

    # How to determine the configuration version.  By default, it will be the
    # time that the configuration is parsed, but you can provide a shell script to override how the
    # version is determined.  The output of this script will be added to every log message in the
    # reports, allowing you to correlate changes on your hosts to the source version on the server.
    # The default value is ''.
    # config_version = 

    # The window of time leading up to a certificate's expiration that a notification
    # will be logged. This applies to CA, master, and agent certificates. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '60d'.
    certificate_expire_warning = 5184000

    # The scheduling priority of the process.  Valid values are 'high',
    # 'normal', 'low', or 'idle', which are mapped to platform-specific
    # values.  The priority can also be specified as an integer value and
    # will be passed as is, e.g. -5.  Puppet must be running as a privileged
    # user in order to increase scheduling priority.
    # priority = 

    # The HTTP proxy port to use for outgoing connections
    # The default value is '3128'.
    # http_proxy_port = 3128

    # Where individual hosts store and look for their private key.
    # The default value is '$privatekeydir/$certname.pem'.
    hostprivkey = /etc/puppet/ssl/private_keys/csa-puppet1.openstacklocal.pem

    # The port for puppet master traffic. For puppet master,
    # this is the port to listen on; for puppet agent, this is the port
    # to make requests on. Both applications use this setting to get the port.
    # The default value is '8140'.
    # masterport = 8140

    # The directory in which to store reports. Each node gets
    # a separate subdirectory in this directory. This setting is only
    # used when the `store` report processor is enabled (see the
    # `reports` setting).
    # The default value is '$vardir/reports'.
    reportdir = /var/lib/puppet/reports

    # The group puppet master should run as.
    # The default value is 'puppet'.
    # group = puppet

    # Configure the backend terminus used for StoreConfigs.
    # By default, this uses the ActiveRecord store, which directly talks to the
    # database from within the Puppet Master process.
    # The default value is 'active_record'.
    storeconfigs_backend = active_record

    # Where FileBucket files are stored.
    # The default value is '$vardir/bucket'.
    bucketdir = /var/lib/puppet/bucket

    # Whether to store each client's configuration, including catalogs, facts,
    # and related data.  This also enables the import and export of resources in
    # the Puppet language - a mechanism for exchange resources between nodes.
    # 
    # By default this uses ActiveRecord and an SQL database to store and query
    # the data; this, in turn, will depend on Rails being available.
    # 
    # You can adjust the backend using the storeconfigs_backend setting.
    # storeconfigs = false

    # Where the fileserver configuration is stored.
    # The default value is '$confdir/fileserver.conf'.
    fileserverconfig = /etc/puppet/fileserver.conf

    # The header containing an authenticated client's SSL DN.
    # This header must be set by the proxy to the authenticated client's SSL
    # DN (e.g., `/CN=puppet.puppetlabs.com`).  Puppet will parse out the Common
    # Name (CN) from the Distinguished Name (DN) and use the value of the CN
    # field for authorization.
    # 
    # Note that the name of the HTTP header gets munged by the web server
    # common gateway inteface: an `HTTP_` prefix is added, dashes are converted
    # to underscores, and all letters are uppercased.  Thus, to use the
    # `X-Client-DN` header, this setting should be `HTTP_X_CLIENT_DN`.
    # The default value is 'HTTP_X_CLIENT_DN'.
    # ssl_client_header = HTTP_X_CLIENT_DN

    # The entry-point manifest for puppet master.
    # The default value is '$manifestdir/site.pp'.
    manifest = /etc/puppet/manifests/site.pp

    # The directory in which YAML data is stored, usually in a subdirectory.
    # The default value is '$vardir/yaml'.
    yamldir = /var/lib/puppet/yaml

    # Where the puppet master web server logs.
    # The default value is '$logdir/masterhttp.log'.
    masterhttplog = /var/lib/puppet/log/masterhttp.log

    # The list of report handlers to use. When using multiple report handlers,
    # their names should be comma-separated, with whitespace allowed. (For example,
    # `reports = http, tagmail`.)
    # 
    # This setting is relevant to puppet master and puppet apply. The puppet
    # master will call these report handlers with the reports it receives from
    # agent nodes, and puppet apply will call them with its own report. (In
    # all cases, the node applying the catalog must have `report = true`.)
    # 
    # See the report reference for information on the built-in report
    # handlers; custom report handlers can also be loaded from modules.
    # (Report handlers are loaded from the lib directory, at
    # `puppet/reports/NAME.rb`.)
    # The default value is 'store'.
    # reports = store

    # How the puppet master determines the client's identity
    # and sets the 'hostname', 'fqdn' and 'domain' facts for use in the manifest,
    # in particular for determining which 'node' statement applies to the client.
    # Possible values are 'cert' (use the subject's CN in the client's
    # certificate) and 'facter' (use the hostname that the client
    # reported in its facts)
    # The default value is 'cert'.
    # node_name = cert

    # The search path for modules, as a list of directories separated by the system
    # path separator character. (The POSIX path separator is ':', and the
    # Windows path separator is ';'.)
    # The default value is '$confdir/modules:/usr/share/puppet/modules'.
    #modulepath = /etc/puppet/modules:/usr/share/puppet/modules

    # The URL that reports should be forwarded to. This setting
    # is only used when the `http` report processor is enabled (see the
    # `reports` setting).
    # The default value is 'http://localhost:3000/reports/upload'.
    # reporturl = http://localhost:3000/reports/upload

    # The configuration file that defines the rights to the different
    # rest indirections.  This can be used as a fine-grained
    # authorization system for `puppet master`.
    # The default value is '$confdir/auth.conf'.
    rest_authconfig = /etc/puppet/auth.conf

    # Code to parse directly.  This is essentially only used
    # by `puppet`, and should only be set if you're writing your own Puppet
    # executable.
    # The default value is ''.
    # code = 

    # The user puppet master should run as.
    # The default value is 'puppet'.
    # user = puppet

    # Where puppet master looks for its manifests.
    # The default value is '$confdir/manifests'.
    manifestdir = /etc/puppet/manifests

    # Whether to only search for the complete
    # hostname as it is in the certificate when searching for node information
    # in the catalogs.
    # strict_hostname_checking = false

    # The header containing the status message of the client
    # verification. This header must be set by the proxy to 'SUCCESS' if the
    # client successfully authenticated, and anything else otherwise.
    # 
    # Note that the name of the HTTP header gets munged by the web server
    # common gateway inteface: an `HTTP_` prefix is added, dashes are converted
    # to underscores, and all letters are uppercased.  Thus, to use the
    # `X-Client-Verify` header, this setting should be
    # `HTTP_X_CLIENT_VERIFY`.
    # The default value is 'HTTP_X_CLIENT_VERIFY'.
    # ssl_client_verify_header = HTTP_X_CLIENT_VERIFY

    # Where puppet master logs.  This is generally not used,
    # since syslog is the default log destination.
    # The default value is '$logdir/puppetmaster.log'.
    masterlog = /var/lib/puppet/log/puppetmaster.log

    # Whether the master should function as a certificate authority.
    # The default value is 'true'.
    # ca = true

    # The directory in which serialized data is stored, usually in a subdirectory.
    # The default value is '$vardir/server_data'.
    server_datadir = /var/lib/puppet/server_data

    # The directory in which client-side YAML data is stored.
    # The default value is '$vardir/client_yaml'.
    clientyamldir = /var/lib/puppet/client_yaml

    # The port to communicate with the inventory_server.
    # The default value is '$masterport'.
    inventory_port = 8140

    # The maximum time to delay before runs.  Defaults to being the same as the
    # run interval. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '$runinterval'.
    splaylimit = 1800

    # A lock file to indicate that a puppet agent catalog run is currently in progress.
    # The file contains the pid of the process that holds the lock on the catalog run.
    # The default value is '$statedir/agent_catalog_run.lock'.
    agent_catalog_run_lockfile = /var/lib/puppet/state/agent_catalog_run.lock

    # Where puppet agent stores the last run report in yaml format.
    # The default value is '$statedir/last_run_report.yaml'.
    lastrunreport = /var/lib/puppet/state/last_run_report.yaml

    # Where FileBucket files are stored locally.
    # The default value is '$vardir/clientbucket'.
    clientbucketdir = /var/lib/puppet/clientbucket

    # Whether to use the cached configuration when the remote
    # configuration will not compile.  This option is useful for testing
    # new configurations, where you want to fix the broken configuration
    # rather than reverting to a known-good one.
    # The default value is 'true'.
    # usecacheonfailure = true

    # The server to use for certificate
    # authority requests.  It's a separate server because it cannot
    # and does not need to horizontally scale.
    # The default value is '$server'.
    ca_server = puppet

    # The puppet master server to which the puppet agent should connect.
    # The default value is 'puppet'.
    # server = puppet

    # Where to store dot-outputted graphs.
    # The default value is '$statedir/graphs'.
    graphdir = /var/lib/puppet/state/graphs

    # The fact name used to determine the node name used for all requests the agent
    # makes to the master. WARNING: This setting is mutually exclusive with
    # node_name_value.  Changing this setting also requires changes to the default
    # auth.conf configuration on the Puppet Master.  Please see
    # http://links.puppetlabs.com/node_name_fact for more information.
    # The default value is ''.
    # node_name_fact = 

    # The server to send transaction reports to.
    # The default value is '$server'.
    report_server = puppet

    # Skip searching for classes and definitions that were missing during a
    # prior compilation. The list of missing objects is maintained per-environment and
    # persists until the environment is cleared or the master is restarted.
    # ignoremissingtypes = false

    # (Deprecated for 'preferred_serialization_format') What format to
    # use to dump the catalog.  Only supports 'marshal' and 'yaml'.  Only
    # matters on the client, since it asks the server for a specific format.
    # The default value is ''.
    # catalog_format = 

    # The domain which will be queried to find the SRV records of servers to use.
    # The default value is 'openstacklocal'.
    # srv_domain = openstacklocal

    # How frequently puppet agent should ask for a signed certificate.
    # 
    # When starting for the first time, puppet agent will submit a certificate
    # signing request (CSR) to the server named in the `ca_server` setting
    # (usually the puppet master); this may be autosigned, or may need to be
    # approved by a human, depending on the CA server's configuration.
    # 
    # Puppet agent cannot apply configurations until its approved certificate is
    # available. Since the certificate may or may not be available immediately,
    # puppet agent will repeatedly try to fetch it at this interval. You can
    # turn off waiting for certificates by specifying a time of 0, in which case
    # puppet agent will exit if it cannot get a cert.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '2m'.
    waitforcert = 120

    # Where puppet agent and puppet master store state associated
    # with the running configuration.  In the case of puppet master,
    # this file reflects the state discovered through interacting
    # with clients.
    # The default value is '$statedir/state.yaml'.
    statefile = /var/lib/puppet/state/state.yaml

    # The server to send facts to.
    # The default value is '$server'.
    inventory_server = puppet

    # How often puppet agent applies the catalog.
    # Note that a runinterval of 0 means "run continuously" rather than
    # "never run." If you want puppet agent to never run, you should start
    # it with the `--no-client` option. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '30m'.
    runinterval = 10m

    # The file in which puppet agent stores a list of the resources
    # associated with the retrieved configuration.
    # The default value is '$statedir/resources.txt'.
    resourcefile = /var/lib/puppet/state/resources.txt

    # Whether to create dot graph files for the different
    # configuration graphs.  These dot files can be interpreted by tools
    # like OmniGraffle or dot (which is part of ImageMagick).
    # graph = false

    # The explicit value used for the node name for all requests the agent
    # makes to the master. WARNING: This setting is mutually exclusive with
    # node_name_fact.  Changing this setting also requires changes to the default
    # auth.conf configuration on the Puppet Master.  Please see
    # http://links.puppetlabs.com/node_name_value for more information.
    # The default value is '$certname'.
    node_name_value = csa-puppet1.openstacklocal

    # How long the client should wait for the configuration to be retrieved
    # before considering it a failure.  This can help reduce flapping if too
    # many clients contact the server at one time. This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '2m'.
    configtimeout = 120

    # Whether to only use the cached catalog rather than compiling a new catalog
    # on every run.  Puppet can be run with this enabled by default and then selectively
    # disabled when a recompile is desired.
    # use_cached_catalog = false

    # The port to use for the certificate authority.
    # The default value is '$masterport'.
    ca_port = 8140

    # Whether the server will search for SRV records in DNS for the current domain.
    # use_srv_records = false

    # Allow http compression in REST communication with the master.
    # This setting might improve performance for agent -> master
    # communications over slow WANs. Your puppet master needs to support
    # compression (usually by activating some settings in a reverse-proxy in
    # front of the puppet master, which rules out webrick). It is harmless to
    # activate this settings if your master doesn't support compression, but
    # if it supports it, this setting might reduce performance on high-speed LANs.
    # http_compression = false

    # Where puppet agent caches the local configuration.  An
    # extension indicating the cache format is added automatically.
    # The default value is '$statedir/localconfig'.
    localconfig = /var/lib/puppet/state/localconfig

    # Whether to send reports after every transaction.
    # The default value is 'true'.
    # report = true

    # The port to communicate with the report_server.
    # The default value is '$masterport'.
    report_port = 8140

    # The log file for puppet agent.  This is generally not used.
    # The default value is '$logdir/puppetd.log'.
    puppetdlog = /var/lib/puppet/log/puppetd.log

    # Ignore cache and always recompile the configuration.  This is
    # useful for testing new configurations, where the local cache may in
    # fact be stale even if the timestamps are up to date - if the facts
    # change or if the server changes.
    # ignorecache = false

    # Whether to apply catalogs in noop mode, which allows Puppet to
    # partially simulate a normal run. This setting affects puppet agent and
    # puppet apply.
    # 
    # When running in noop mode, Puppet will check whether each resource is in sync,
    # like it does when running normally. However, if a resource attribute is not in
    # the desired state (as declared in the catalog), Puppet will take no
    # action, and will instead report the changes it _would_ have made. These
    # simulated changes will appear in the report sent to the puppet master, or
    # be shown on the console if running puppet agent or puppet apply in the
    # foreground. The simulated changes will not send refresh events to any
    # subscribing or notified resources, although Puppet will log that a refresh
    # event _would_ have been sent.
    # 
    # **Important note:**
    # [The `noop` metaparameter](http://docs.puppetlabs.com/references/latest/metaparameter.html#noop)
    # allows you to apply individual resources in noop mode, and will override
    # the global value of the `noop` setting. This means a resource with
    # `noop => false` _will_ be changed if necessary, even when running puppet
    # agent with `noop = true` or `--noop`. (Conversely, a resource with
    # `noop => true` will only be simulated, even when noop mode is globally disabled.)
    # noop = false

    # Whether puppet agent should listen for
    # connections.  If this is true, then puppet agent will accept incoming
    # REST API requests, subject to the default ACLs and the ACLs set in
    # the `rest_authconfig` file. Puppet agent can respond usefully to
    # requests on the `run`, `facts`, `certificate`, and `resource` endpoints.
    # listen = false

    # The serialization format to use when sending reports to the
    # `report_server`. Possible values are `pson` and `yaml`. This setting
    # affects puppet agent, but not puppet apply (which processes its own
    # reports).
    # 
    # This should almost always be set to `pson`. It can be temporarily set to
    # `yaml` to let agents using this Puppet version connect to a puppet master
    # running Puppet 3.0.0 through 3.2.x.
    # 
    # Note that this is set to 'yaml' automatically if the agent detects an
    # older master, so should never need to be set explicitly.
    # The default value is 'pson'.
    # report_serialization_format = pson

    # During an inspect run, whether to archive files whose contents are audited to a file bucket.
    # archive_files = false

    # During an inspect run, the file bucket server to archive files to if archive_files is set.
    # The default value is '$server'.
    archive_file_server = puppet

    # Whether each resource should log when it is
    # being evaluated.  This allows you to interactively see exactly
    # what is being done.
    # evaltrace = false

    # Whether to print a transaction summary.
    # summarize = false

    # Tags to use to find resources.  If this is set, then
    # only resources tagged with the specified tags will be applied.
    # Values must be comma-separated.
    # The default value is ''.
    # tags = 

    # The directory which the skeleton for module tool generate is stored.
    # The default value is '$module_working_dir/skeleton'.
    module_skeleton_dir = /var/lib/puppet/puppet-module/skeleton

    # The directory into which module tool data is stored
    # The default value is '$vardir/puppet-module'.
    module_working_dir = /var/lib/puppet/puppet-module

    # The module repository
    # The default value is 'https://forge.puppetlabs.com'.
    # module_repository = https://forge.puppetlabs.com

    # Where the CA stores signed certificates.
    # The default value is '$cadir/signed'.
    signeddir = /etc/puppet/ssl/ca/signed

    # The root directory for the certificate authority.
    # The default value is '$ssldir/ca'.
    cadir = /etc/puppet/ssl/ca

    # Whether to allow a new certificate
    # request to overwrite an existing certificate.
    # allow_duplicate_certs = false

    # The CA private key.
    # The default value is '$cadir/ca_key.pem'.
    cakey = /etc/puppet/ssl/ca/ca_key.pem

    # The bit length of the certificates.
    # The default value is '4096'.
    # req_bits = 4096

    # The certificate revocation list (CRL) for the CA. Will be used if present but otherwise ignored.
    # The default value is '$cadir/ca_crl.pem'.
    cacrl = /etc/puppet/ssl/ca/ca_crl.pem

    # The inventory file. This is a text file to which the CA writes a
    # complete listing of all certificates.
    # The default value is '$cadir/inventory.txt'.
    cert_inventory = /etc/puppet/ssl/ca/inventory.txt

    # Where the CA stores certificate requests
    # The default value is '$cadir/requests'.
    csrdir = /etc/puppet/ssl/ca/requests

    # The name to use the Certificate Authority certificate.
    # The default value is 'Puppet CA: $certname'.
    ca_name = Puppet CA: csa-puppet1.openstacklocal

    # Where the CA stores the password for the private key.
    # The default value is '$caprivatedir/ca.pass'.
    capass = /etc/puppet/ssl/ca/private/ca.pass

    # The CA certificate.
    # The default value is '$cadir/ca_crt.pem'.
    cacert = /etc/puppet/ssl/ca/ca_crt.pem

    # The default TTL for new certificates. If this setting is set, ca_days is ignored.
    # This setting can be a time interval in seconds (30 or 30s), minutes (30m), hours (6h), days (2d), or years (5y).
    # The default value is '5y'.
    ca_ttl = 157680000

    # The CA public key.
    # The default value is '$cadir/ca_pub.pem'.
    capub = /etc/puppet/ssl/ca/ca_pub.pem

    # Where the serial number for certificates is stored.
    # The default value is '$cadir/serial'.
    serial = /etc/puppet/ssl/ca/serial

    # The bit length of keys.
    # The default value is '4096'.
    # keylength = 4096

    # Whether (and how) to autosign certificate requests. This setting
    # is only relevant on a puppet master acting as a certificate authority (CA).
    # 
    # Valid values are true (autosigns all certificate requests; not recommended),
    # false (disables autosigning certificates), or the absolute path to a file.
    # 
    # The file specified in this setting may be either a **configuration file**
    # or a **custom policy executable.** Puppet will automatically determine
    # what it is: If the Puppet user (see the `user` setting) can execute the
    # file, it will be treated as a policy executable; otherwise, it will be
    # treated as a config file.
    # 
    # If a custom policy executable is configured, the CA puppet master will run it
    # every time it receives a CSR. The executable will be passed the subject CN of the
    # request _as a command line argument,_ and the contents of the CSR in PEM format
    # _on stdin._ It should exit with a status of 0 if the cert should be autosigned
    # and non-zero if the cert should not be autosigned.
    # 
    # If a certificate request is not autosigned, it will persist for review. An admin
    # user can use the `puppet cert sign` command to manually sign it, or can delete
    # the request.
    # 
    # For info on autosign configuration files, see
    # [the guide to Puppet's config files](http://docs.puppetlabs.com/guides/configuring.html).
    # The default value is '$confdir/autosign.conf'.
    autosign = /etc/puppet/autosign.conf

    # Where the CA stores private certificate information.
    # The default value is '$cadir/private'.
    caprivatedir = /etc/puppet/ssl/ca/private

    # The database user for caching. Only
    # used when networked databases are used. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'puppet'.
    # dbuser = puppet

    # The number of database connections for networked
    # databases.  Will be ignored unless the value is a positive integer. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is ''.
    # dbconnections = 

    # The type of database to use. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'sqlite3'.
    # dbadapter = sqlite3

    # Where Rails-specific logs are sent. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is '$logdir/rails.log'.
    railslog = /var/lib/puppet/log/rails.log

    # The name of the database to use. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'puppet'.
    # dbname = puppet

    # The database password for caching. Only
    # used when networked databases are used. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is ''.
    # dbport = 

    # The database password for caching. Only
    # used when networked databases are used. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'puppet'.
    # dbpassword = puppet

    # The sqlite database file. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is '$statedir/clientconfigs.sqlite3'.
    dblocation = /var/lib/puppet/state/clientconfigs.sqlite3

    # The database socket location. Only used when networked
    # databases are used.  Will be ignored if the value is an empty string. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is ''.
    # dbsocket = 

    # Whether to automatically migrate the database. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # dbmigrate = false

    # The log level for Rails connections.  The value must be
    # a valid log level within Rails.  Production environments normally use `info`
    # and other environments normally use `debug`. This setting is only used by the ActiveRecord storeconfigs and inventory backends, which are deprecated.
    # The default value is 'info'.
    # rails_loglevel = info

    # The database server for caching. Only
    # used when networked databases are used.
    # The default value is 'localhost'.
    # dbserver = localhost

    # Whether to document all resources when using `puppet doc` to
    # generate manifest documentation.
    # document_all = false

    # The address a listening server should bind to.
    # The default value is '0.0.0.0'.
    # bindaddress = 0.0.0.0

    # The file containing the PID of a running process.
    # This file is intended to be used by service management frameworks
    # and monitoring systems to determine if a puppet process is still in
    # the process table.
    # The default value is '$rundir/${run_mode}.pid'.
    pidfile = /var/lib/puppet/run/master.pid

    # The configuration file for the current puppet application.
    # The default value is '$confdir/${config_file_name}'.
    config = /etc/puppet/puppet.conf

    # The name of the puppet config file.
    # The default value is 'puppet.conf'.
    # config_file_name = puppet.conf

    # Path to the device config file for puppet device.
    # The default value is '$confdir/device.conf'.
    deviceconfig = /etc/puppet/device.conf

    # The root directory of devices' $vardir.
    # The default value is '$vardir/devices'.
    devicedir = /var/lib/puppet/devices

    # Permit hyphens (`-`) in variable names and issue deprecation warnings about
    # them. This setting **should always be `false`;** setting it to `true`
    # will cause subtle and wide-ranging bugs. It will be removed in a future version.
    # 
    # Hyphenated variables caused major problems in the language, but were allowed
    # between Puppet 2.7.3 and 2.7.14. If you used them during this window, we
    # apologize for the inconvenience --- you can temporarily set this to `true`
    # in order to upgrade, and can rename your variables at your leisure. Please
    # revert it to `false` after you have renamed all affected variables.
    # allow_variables_with_dashes = false

    # Sets the max number of logged/displayed parser validation warnings in
    # case multiple errors have been detected. A value of 0 is the same as
    # value 1. The count is per manifest.
    # The default value is '10'.
    # max_warnings = 10

    # Where Puppet looks for template files.  Can be a list of colon-separated
    # directories.
    # The default value is '$vardir/templates'.
    templatedir = /var/lib/puppet/templates
